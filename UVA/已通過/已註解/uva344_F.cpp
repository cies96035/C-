#include<iostream>
using namespace std;

int N;
/*/ 
struct Roman
{
	int i,v,x,l,c;
	void add(int n,int k)
	{
		if(k==0)
			c+=n;
		else if(k==1)
			l+=n;
		else if(k==2)
			x+=n;
		else if(k==3)
			v+=n;
		else if(k==4)
			i+=n;
		return ;
	}
	Roman operator + (const Roman &x)
	{
		Roman tmp;
		tmp.c=x.c+this->c;
		tmp.l=x.l+this->l;
		tmp.x=x.x+this->x;
		tmp.v=x.v+this->v;
		tmp.i=x.i+this->i;
		return tmp;
	}
}
roman[101],roman_sum[101],
sp[4]={{0,0,1,0,1},{0,0,1,1,0},{1,0,1,0,0},{1,1,0,0,0}};

void Init()
{
	const int V[5]={100,50,10,5,1},spV[4]={90,40,9,4};
	for(int i=1,n,v=0,sum=0;i<=100;n++,v=0,sum=0,i++)
	{
		n=i;
		while(n)
		{
			roman[i].add(n/V[v],v);
			n%=V[v];
			if(v<4&&n>=spV[v])
			{
				roman[i]=roman[i]+sp[v];
				n-=spV[v];
			}
			v++;
		}
		roman_sum[i]=roman_sum[i-1]+roman[i];
	}
	return;
}
/**/

int Ansarr[101][5]=
{
	{0,0,0,0,0},
	{1,0,0,0,0},
	{3,0,0,0,0},
	{6,0,0,0,0},
	{7,1,0,0,0},
	{7,2,0,0,0},
	{8,3,0,0,0},
	{10,4,0,0,0},
	{13,5,0,0,0},
	{14,5,1,0,0},
	{14,5,2,0,0},
	{15,5,3,0,0},
	{17,5,4,0,0},
	{20,5,5,0,0},
	{21,6,6,0,0},
	{21,7,7,0,0},
	{22,8,8,0,0},
	{24,9,9,0,0},
	{27,10,10,0,0},
	{28,10,12,0,0},
	{28,10,14,0,0},
	{29,10,16,0,0},
	{31,10,18,0,0},
	{34,10,20,0,0},
	{35,11,22,0,0},
	{35,12,24,0,0},
	{36,13,26,0,0},
	{38,14,28,0,0},
	{41,15,30,0,0},
	{42,15,33,0,0},
	{42,15,36,0,0},
	{43,15,39,0,0},
	{45,15,42,0,0},
	{48,15,45,0,0},
	{49,16,48,0,0},
	{49,17,51,0,0},
	{50,18,54,0,0},
	{52,19,57,0,0},
	{55,20,60,0,0},
	{56,20,64,0,0},
	{56,20,65,1,0},
	{57,20,66,2,0},
	{59,20,67,3,0},
	{62,20,68,4,0},
	{63,21,69,5,0},
	{63,22,70,6,0},
	{64,23,71,7,0},
	{66,24,72,8,0},
	{69,25,73,9,0},
	{70,25,75,10,0},
	{70,25,75,11,0},
	{71,25,75,12,0},
	{73,25,75,13,0},
	{76,25,75,14,0},
	{77,26,75,15,0},
	{77,27,75,16,0},
	{78,28,75,17,0},
	{80,29,75,18,0},
	{83,30,75,19,0},
	{84,30,76,20,0},
	{84,30,77,21,0},
	{85,30,78,22,0},
	{87,30,79,23,0},
	{90,30,80,24,0},
	{91,31,81,25,0},
	{91,32,82,26,0},
	{92,33,83,27,0},
	{94,34,84,28,0},
	{97,35,85,29,0},
	{98,35,87,30,0},
	{98,35,89,31,0},
	{99,35,91,32,0},
	{101,35,93,33,0},
	{104,35,95,34,0},
	{105,36,97,35,0},
	{105,37,99,36,0},
	{106,38,101,37,0},
	{108,39,103,38,0},
	{111,40,105,39,0},
	{112,40,108,40,0},
	{112,40,111,41,0},
	{113,40,114,42,0},
	{115,40,117,43,0},
	{118,40,120,44,0},
	{119,41,123,45,0},
	{119,42,126,46,0},
	{120,43,129,47,0},
	{122,44,132,48,0},
	{125,45,135,49,0},
	{126,45,139,50,0},
	{126,45,140,50,1},
	{127,45,141,50,2},
	{129,45,142,50,3},
	{132,45,143,50,4},
	{133,46,144,50,5},
	{133,47,145,50,6},
	{134,48,146,50,7},
	{136,49,147,50,8},
	{139,50,148,50,9},
	{140,50,150,50,10},
	{140,50,150,50,11}
};

int main()
{
	cin.tie(0);
	ios_base::sync_with_stdio(0);
	
	/*/
	Init();
	/**/
	/*///get cache Arr
	for(int i=0;i<=100;i++)
	{
		cout<<"{"<<
		roman_sum[i].i<<','<<
		roman_sum[i].v<<','<<
		roman_sum[i].x<<','<<
		roman_sum[i].l<<','<<
		roman_sum[i].c<<"},\n";
	}
	/**/
	
	while(cin>>N&&N)
	{
		//faster
		cout<<N<<": "<<
		Ansarr[N][0]<<" i, "<<
		Ansarr[N][1]<<" v, "<<
		Ansarr[N][2]<<" x, "<<
		Ansarr[N][3]<<" l, "<<
		Ansarr[N][4]<<" c\n";
		
		/*///true Ans
		cout<<N<<": "<<
		roman_sum[N].i<<" i, "<<
		roman_sum[N].v<<" v, "<<
		roman_sum[N].x<<" x, "<<
		roman_sum[N].l<<" l, "<<
		roman_sum[N].c<<" c\n";
		/**/
	}
	
	return 0;
}

